import Card from './card.js';

class Ship extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      card: false,
      adress1: '',
      adress2: '',
      state: '',
      code1: null,
      phone: null
    };
    this.userInfo = this.props.userInfo;
  }

  myChangeHandler2() {
    event.preventDefault();
    this.setState({
      card: true
    });
  }

  myChangeHandlerB(event) {
    let num = event.target.name;
    let val = event.target.value;
    this.setState({
      [num]: val
    });
  }

  render() {
    return React.createElement("div", null, this.state.card ? React.createElement(Card, {
      signAhip: Object.assign(this.state, this.userInfo)
    }) : React.createElement("div", null, React.createElement("h2", null, "Ship Info"), React.createElement("form", null, "Adress 1:", React.createElement("input", {
      type: "text",
      name: "adress1",
      onChange: this.myChangeHandlerB.bind(this)
    }), React.createElement("br", null), "Adress 2:", React.createElement("input", {
      type: "text",
      name: "adress2",
      onChange: this.myChangeHandlerB.bind(this)
    }), React.createElement("br", null), "State:", React.createElement("input", {
      type: "text",
      name: "state",
      onChange: this.myChangeHandlerB.bind(this)
    }), React.createElement("br", null), "Zip Code:", React.createElement("input", {
      type: "text",
      name: "code1",
      onChange: this.myChangeHandlerB.bind(this)
    }), React.createElement("br", null), "Phone Num:", React.createElement("input", {
      type: "text",
      name: "phone",
      onChange: this.myChangeHandlerB.bind(this)
    }), React.createElement("br", null), React.createElement("button", {
      type: "submit",
      onClick: this.myChangeHandler2.bind(this)
    }, "Next"))));
  }

}

export default Ship;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9zaGlwLmpzeCJdLCJuYW1lcyI6WyJDYXJkIiwiU2hpcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiY2FyZCIsImFkcmVzczEiLCJhZHJlc3MyIiwiY29kZTEiLCJwaG9uZSIsInVzZXJJbmZvIiwibXlDaGFuZ2VIYW5kbGVyMiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsIm15Q2hhbmdlSGFuZGxlckIiLCJudW0iLCJ0YXJnZXQiLCJuYW1lIiwidmFsIiwidmFsdWUiLCJyZW5kZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxJQUFQLE1BQWlCLFdBQWpCOztBQUVBLE1BQU1DLElBQU4sU0FBbUJDLEtBQUssQ0FBQ0MsU0FBekIsQ0FBa0M7QUFDOUJDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFPO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQVk7QUFDUkMsTUFBQUEsSUFBSSxFQUFFLEtBREU7QUFFUkMsTUFBQUEsT0FBTyxFQUFFLEVBRkQ7QUFHUkMsTUFBQUEsT0FBTyxFQUFFLEVBSEQ7QUFJUkgsTUFBQUEsS0FBSyxFQUFFLEVBSkM7QUFLUkksTUFBQUEsS0FBSyxFQUFFLElBTEM7QUFNUkMsTUFBQUEsS0FBSyxFQUFFO0FBTkMsS0FBWjtBQVNBLFNBQUtDLFFBQUwsR0FBZ0IsS0FBS1AsS0FBTCxDQUFXTyxRQUEzQjtBQUNBOztBQUNEQyxFQUFBQSxnQkFBZ0IsR0FBRTtBQUVkQyxJQUFBQSxLQUFLLENBQUNDLGNBQU47QUFDQSxTQUFLQyxRQUFMLENBQWM7QUFBQ1QsTUFBQUEsSUFBSSxFQUFFO0FBQVAsS0FBZDtBQUNIOztBQUNEVSxFQUFBQSxnQkFBZ0IsQ0FBQ0gsS0FBRCxFQUFPO0FBQ3BCLFFBQUlJLEdBQUcsR0FBR0osS0FBSyxDQUFDSyxNQUFOLENBQWFDLElBQXZCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHUCxLQUFLLENBQUNLLE1BQU4sQ0FBYUcsS0FBdkI7QUFDQSxTQUFLTixRQUFMLENBQWM7QUFBQyxPQUFDRSxHQUFELEdBQU9HO0FBQVIsS0FBZDtBQUNGOztBQUNERSxFQUFBQSxNQUFNLEdBQUU7QUFDSixXQUNJLGlDQUNNLEtBQUtqQixLQUFMLENBQVdDLElBQVosR0FBa0Isb0JBQUMsSUFBRDtBQUFNLE1BQUEsUUFBUSxFQUFFaUIsTUFBTSxDQUFDQyxNQUFQLENBQWMsS0FBS25CLEtBQW5CLEVBQTBCLEtBQUtNLFFBQS9CO0FBQWhCLE1BQWxCLEdBQ0QsaUNBQ2QsNENBRGMsRUFFZCwrQ0FFQTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxJQUFJLEVBQUMsU0FBeEI7QUFBa0MsTUFBQSxRQUFRLEVBQUUsS0FBS0ssZ0JBQUwsQ0FBc0JTLElBQXRCLENBQTJCLElBQTNCO0FBQTVDLE1BRkEsRUFHQSwrQkFIQSxlQUtBO0FBQU8sTUFBQSxJQUFJLEVBQUMsTUFBWjtBQUFtQixNQUFBLElBQUksRUFBQyxTQUF4QjtBQUFrQyxNQUFBLFFBQVEsRUFBRSxLQUFLVCxnQkFBTCxDQUFzQlMsSUFBdEIsQ0FBMkIsSUFBM0I7QUFBNUMsTUFMQSxFQU1BLCtCQU5BLFlBUUE7QUFBTyxNQUFBLElBQUksRUFBQyxNQUFaO0FBQW1CLE1BQUEsSUFBSSxFQUFDLE9BQXhCO0FBQWdDLE1BQUEsUUFBUSxFQUFFLEtBQUtULGdCQUFMLENBQXNCUyxJQUF0QixDQUEyQixJQUEzQjtBQUExQyxNQVJBLEVBU0EsK0JBVEEsZUFXQTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxJQUFJLEVBQUMsT0FBeEI7QUFBZ0MsTUFBQSxRQUFRLEVBQUUsS0FBS1QsZ0JBQUwsQ0FBc0JTLElBQXRCLENBQTJCLElBQTNCO0FBQTFDLE1BWEEsRUFZQSwrQkFaQSxnQkFjQTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxJQUFJLEVBQUMsT0FBeEI7QUFBZ0MsTUFBQSxRQUFRLEVBQUUsS0FBS1QsZ0JBQUwsQ0FBc0JTLElBQXRCLENBQTJCLElBQTNCO0FBQTFDLE1BZEEsRUFlQSwrQkFmQSxFQWdCQTtBQUFRLE1BQUEsSUFBSSxFQUFDLFFBQWI7QUFBc0IsTUFBQSxPQUFPLEVBQUUsS0FBS2IsZ0JBQUwsQ0FBc0JhLElBQXRCLENBQTJCLElBQTNCO0FBQS9CLGNBaEJBLENBRmMsQ0FGSixDQURKO0FBMkJIOztBQXBENkI7O0FBc0RsQyxlQUFlekIsSUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYXJkIGZyb20gJy4vY2FyZC5qcyc7XG5cbmNsYXNzIFNoaXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgICBzdXBlcihwcm9wcyk7XG4gICAgIHRoaXMuc3RhdGUgPXtcbiAgICAgICAgIGNhcmQ6IGZhbHNlLFxuICAgICAgICAgYWRyZXNzMTogJycsXG4gICAgICAgICBhZHJlc3MyOiAnJyxcbiAgICAgICAgIHN0YXRlOiAnJyxcbiAgICAgICAgIGNvZGUxOiBudWxsLFxuICAgICAgICAgcGhvbmU6IG51bGwsXG5cbiAgICAgfTtcbiAgICAgdGhpcy51c2VySW5mbyA9IHRoaXMucHJvcHMudXNlckluZm9cbiAgICB9XG4gICAgbXlDaGFuZ2VIYW5kbGVyMigpe1xuICAgICAgICBcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y2FyZDogdHJ1ZX0pO1xuICAgIH1cbiAgICBteUNoYW5nZUhhbmRsZXJCKGV2ZW50KXtcbiAgICAgICBsZXQgbnVtID0gZXZlbnQudGFyZ2V0Lm5hbWU7XG4gICAgICAgbGV0IHZhbCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICB0aGlzLnNldFN0YXRlKHtbbnVtXTogdmFsfSk7XG4gICAgfVxuICAgIHJlbmRlcigpe1xuICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIHsodGhpcy5zdGF0ZS5jYXJkKT88Q2FyZCBzaWduQWhpcD17T2JqZWN0LmFzc2lnbih0aGlzLnN0YXRlLCB0aGlzLnVzZXJJbmZvKX0vPjpcbiAgICAgICAgICAgICAgICA8ZGl2PiAgICAgICAgICBcbiAgPGgyPlNoaXAgSW5mbzwvaDI+XG4gIDxmb3JtID5cbiAgQWRyZXNzIDE6XG4gIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJhZHJlc3MxXCIgb25DaGFuZ2U9e3RoaXMubXlDaGFuZ2VIYW5kbGVyQi5iaW5kKHRoaXMpfS8+XG4gIDxicj48L2JyPlxuICBBZHJlc3MgMjpcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImFkcmVzczJcIiBvbkNoYW5nZT17dGhpcy5teUNoYW5nZUhhbmRsZXJCLmJpbmQodGhpcyl9Lz5cbiAgPGJyPjwvYnI+XG4gIFN0YXRlOlxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwic3RhdGVcIiBvbkNoYW5nZT17dGhpcy5teUNoYW5nZUhhbmRsZXJCLmJpbmQodGhpcyl9Lz5cbiAgPGJyPjwvYnI+XG4gIFppcCBDb2RlOlxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiY29kZTFcIiBvbkNoYW5nZT17dGhpcy5teUNoYW5nZUhhbmRsZXJCLmJpbmQodGhpcyl9Lz5cbiAgPGJyPjwvYnI+XG4gIFBob25lIE51bTpcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInBob25lXCIgb25DaGFuZ2U9e3RoaXMubXlDaGFuZ2VIYW5kbGVyQi5iaW5kKHRoaXMpfS8+XG4gIDxicj48L2JyPlxuICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBvbkNsaWNrPXt0aGlzLm15Q2hhbmdlSGFuZGxlcjIuYmluZCh0aGlzKX0+TmV4dDwvYnV0dG9uPlxuICA8L2Zvcm0+IFxuICAgIDwvZGl2PlxufSBcbjwvZGl2PiBcbiAgICAgICAgKVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFNoaXA7XG4iXX0=