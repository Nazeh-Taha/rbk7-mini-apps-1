import Summ from './summ.js';

class Card extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      summ: false,
      cardnum: null,
      exp: null,
      cvv: null,
      code2: null
    };
    this.signAhip = this.props.signAhip;
  }

  myChangeHandler3() {
    event.preventDefault();
    this.setState({
      summ: true
    });
  }

  myChangeHandlerC(event) {
    let num = event.target.name;
    let val = event.target.value;
    this.setState({
      [num]: val
    });
  }

  render() {
    return React.createElement("div", null, this.state.summ ? React.createElement(Summ, {
      allData: Object.assign(this.state, this.signAhip)
    }) : React.createElement("div", null, React.createElement("h2", null, "Card Info"), React.createElement("form", null, "Card #:", React.createElement("input", {
      type: "number",
      name: "cardnum",
      onChange: this.myChangeHandlerC.bind(this)
    }), React.createElement("br", null), "Exp Data:", React.createElement("input", {
      type: "date",
      name: "exp",
      onChange: this.myChangeHandlerC.bind(this)
    }), React.createElement("br", null), "CVV:", React.createElement("input", {
      type: "number",
      name: "cvv",
      onChange: this.myChangeHandlerC.bind(this)
    }), React.createElement("br", null), "Zip Code:", React.createElement("input", {
      type: "number",
      name: "code2",
      onChange: this.myChangeHandlerC.bind(this)
    }), React.createElement("br", null), React.createElement("button", {
      type: "submit",
      onClick: this.myChangeHandler3.bind(this)
    }, "Next"))));
  }

}

export default Card;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9jYXJkLmpzeCJdLCJuYW1lcyI6WyJTdW1tIiwiQ2FyZCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwic3VtbSIsImNhcmRudW0iLCJleHAiLCJjdnYiLCJjb2RlMiIsInNpZ25BaGlwIiwibXlDaGFuZ2VIYW5kbGVyMyIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzZXRTdGF0ZSIsIm15Q2hhbmdlSGFuZGxlckMiLCJudW0iLCJ0YXJnZXQiLCJuYW1lIiwidmFsIiwidmFsdWUiLCJyZW5kZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxJQUFQLE1BQWlCLFdBQWpCOztBQUNBLE1BQU1DLElBQU4sU0FBbUJDLEtBQUssQ0FBQ0MsU0FBekIsQ0FBa0M7QUFDOUJDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFPO0FBQ2QsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBVztBQUNQQyxNQUFBQSxJQUFJLEVBQUUsS0FEQztBQUVQQyxNQUFBQSxPQUFPLEVBQUUsSUFGRjtBQUdQQyxNQUFBQSxHQUFHLEVBQUUsSUFIRTtBQUlQQyxNQUFBQSxHQUFHLEVBQUUsSUFKRTtBQUtQQyxNQUFBQSxLQUFLLEVBQUU7QUFMQSxLQUFYO0FBUUEsU0FBS0MsUUFBTCxHQUFnQixLQUFLUCxLQUFMLENBQVdPLFFBQTNCO0FBQ0g7O0FBQ0RDLEVBQUFBLGdCQUFnQixHQUFFO0FBRWRDLElBQUFBLEtBQUssQ0FBQ0MsY0FBTjtBQUNBLFNBQUtDLFFBQUwsQ0FBYztBQUFDVCxNQUFBQSxJQUFJLEVBQUU7QUFBUCxLQUFkO0FBQ0g7O0FBQ0RVLEVBQUFBLGdCQUFnQixDQUFDSCxLQUFELEVBQU87QUFDbkIsUUFBSUksR0FBRyxHQUFHSixLQUFLLENBQUNLLE1BQU4sQ0FBYUMsSUFBdkI7QUFDQSxRQUFJQyxHQUFHLEdBQUdQLEtBQUssQ0FBQ0ssTUFBTixDQUFhRyxLQUF2QjtBQUNBLFNBQUtOLFFBQUwsQ0FBYztBQUFDLE9BQUNFLEdBQUQsR0FBT0c7QUFBUixLQUFkO0FBRUg7O0FBQ0RFLEVBQUFBLE1BQU0sR0FBRTtBQUNKLFdBQ0ksaUNBQ00sS0FBS2pCLEtBQUwsQ0FBV0MsSUFBWixHQUFrQixvQkFBQyxJQUFEO0FBQU0sTUFBQSxPQUFPLEVBQUVpQixNQUFNLENBQUNDLE1BQVAsQ0FBYyxLQUFLbkIsS0FBbkIsRUFBMEIsS0FBS00sUUFBL0I7QUFBZixNQUFsQixHQUNELGlDQUNkLDRDQURjLEVBRWQsNkNBRUE7QUFBTyxNQUFBLElBQUksRUFBQyxRQUFaO0FBQXFCLE1BQUEsSUFBSSxFQUFDLFNBQTFCO0FBQW9DLE1BQUEsUUFBUSxFQUFFLEtBQUtLLGdCQUFMLENBQXNCUyxJQUF0QixDQUEyQixJQUEzQjtBQUE5QyxNQUZBLEVBR0EsK0JBSEEsZUFLQTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxJQUFJLEVBQUMsS0FBeEI7QUFBOEIsTUFBQSxRQUFRLEVBQUUsS0FBS1QsZ0JBQUwsQ0FBc0JTLElBQXRCLENBQTJCLElBQTNCO0FBQXhDLE1BTEEsRUFNQSwrQkFOQSxVQVFBO0FBQU8sTUFBQSxJQUFJLEVBQUMsUUFBWjtBQUFxQixNQUFBLElBQUksRUFBQyxLQUExQjtBQUFnQyxNQUFBLFFBQVEsRUFBRSxLQUFLVCxnQkFBTCxDQUFzQlMsSUFBdEIsQ0FBMkIsSUFBM0I7QUFBMUMsTUFSQSxFQVNBLCtCQVRBLGVBV0E7QUFBTyxNQUFBLElBQUksRUFBQyxRQUFaO0FBQXFCLE1BQUEsSUFBSSxFQUFDLE9BQTFCO0FBQWtDLE1BQUEsUUFBUSxFQUFFLEtBQUtULGdCQUFMLENBQXNCUyxJQUF0QixDQUEyQixJQUEzQjtBQUE1QyxNQVhBLEVBWUEsK0JBWkEsRUFjQTtBQUFRLE1BQUEsSUFBSSxFQUFDLFFBQWI7QUFBc0IsTUFBQSxPQUFPLEVBQUcsS0FBS2IsZ0JBQUwsQ0FBc0JhLElBQXRCLENBQTJCLElBQTNCO0FBQWhDLGNBZEEsQ0FGYyxDQUZKLENBREo7QUF5Qkg7O0FBbEQ2Qjs7QUFvRGxDLGVBQWV6QixJQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN1bW0gZnJvbSAnLi9zdW1tLmpzJztcbmNsYXNzIENhcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGU9e1xuICAgICAgICAgICAgc3VtbTogZmFsc2UsXG4gICAgICAgICAgICBjYXJkbnVtOiBudWxsLFxuICAgICAgICAgICAgZXhwOiBudWxsLFxuICAgICAgICAgICAgY3Z2OiBudWxsLFxuICAgICAgICAgICAgY29kZTI6IG51bGwsXG4gICAgICAgICAgICBcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zaWduQWhpcCA9IHRoaXMucHJvcHMuc2lnbkFoaXA7XG4gICAgfVxuICAgIG15Q2hhbmdlSGFuZGxlcjMoKXtcbiAgICAgICAgXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe3N1bW06IHRydWV9KVxuICAgIH1cbiAgICBteUNoYW5nZUhhbmRsZXJDKGV2ZW50KXtcbiAgICAgICAgbGV0IG51bSA9IGV2ZW50LnRhcmdldC5uYW1lO1xuICAgICAgICBsZXQgdmFsID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtbbnVtXTogdmFsfSk7XG5cbiAgICB9XG4gICAgcmVuZGVyKCl7XG4gICAgICAgIHJldHVybihcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgeyh0aGlzLnN0YXRlLnN1bW0pPzxTdW1tIGFsbERhdGE9e09iamVjdC5hc3NpZ24odGhpcy5zdGF0ZSwgdGhpcy5zaWduQWhpcCl9Lz46XG4gICAgICAgICAgICAgICAgPGRpdj4gICAgICAgICBcbiAgPGgyPkNhcmQgSW5mbzwvaDI+XG4gIDxmb3JtID5cbiAgQ2FyZCAjOlxuICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJjYXJkbnVtXCIgb25DaGFuZ2U9e3RoaXMubXlDaGFuZ2VIYW5kbGVyQy5iaW5kKHRoaXMpfS8+XG4gIDxicj48L2JyPlxuICBFeHAgRGF0YTpcbiAgPGlucHV0IHR5cGU9XCJkYXRlXCIgbmFtZT1cImV4cFwiIG9uQ2hhbmdlPXt0aGlzLm15Q2hhbmdlSGFuZGxlckMuYmluZCh0aGlzKX0vPlxuICA8YnI+PC9icj5cbiAgQ1ZWOlxuICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJjdnZcIiBvbkNoYW5nZT17dGhpcy5teUNoYW5nZUhhbmRsZXJDLmJpbmQodGhpcyl9Lz5cbiAgPGJyPjwvYnI+XG4gIFppcCBDb2RlOlxuICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJjb2RlMlwiIG9uQ2hhbmdlPXt0aGlzLm15Q2hhbmdlSGFuZGxlckMuYmluZCh0aGlzKX0vPlxuICA8YnI+PC9icj5cbiAgXG4gIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIG9uQ2xpY2s9eyh0aGlzLm15Q2hhbmdlSGFuZGxlcjMuYmluZCh0aGlzKSl9Pk5leHQ8L2J1dHRvbj5cbiAgPC9mb3JtPiBcbiAgPC9kaXY+XG4gIH0gXG4gICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBDYXJkOyJdfQ==